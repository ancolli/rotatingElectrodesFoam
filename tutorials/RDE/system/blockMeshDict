/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

le 20.000000000;
Re 5.000000000;
Ri 1.500000000;

e 
            ( 
              (0.01 0.1 10) //  y.x.z-dir, % cells, expansion 
	      (0.98 0.7 0.15)
	      (0.01 0.2 0.01)
            ) ;
e1 
            ( 
	      (0.9 0.8 1) //  y.x.z-dir, % cells, expansion 
	      (0.1 0.2 0.1)
            ) ;

vertices
(

(	0.000000000000	0.000000000000	0.000000000000	)
(	1.498572332373	-0.065429081048	0.000000000000	)
(	4.995241107909	-0.218096936827	0.000000000000	)
(	4.995241107909	0.218096936827	0.000000000000	)
(	1.498572332373	0.065429081048	0.000000000000	)
				
(	0.000000000000	0.000000000000	$le	)
(	1.498572332373	-0.065429081048	$le	)
(	4.995241107909	-0.218096936827	$le	)
(	4.995241107909	0.218096936827	$le	)
(	1.498572332373	0.065429081048	$le	)
				
);

blocks
(
	hex (0 1 4 0 5 6 9 5) (35 1 100) simpleGrading (1 1 $e)
	hex (1 2 3 4 6 7 8 9) (45 1 100) simpleGrading ($e1 1 $e)
);

edges
(

arc 1 4 ($Ri 0 0)
arc 6 9 ($Ri 0 $le)

arc 2 3 ($Re 0 0)
arc 7 8 ($Re 0 $le)

);

boundary
(

axis
{
type  empty;
	faces
	(
		(0 5 5 0)
	);
}

wall_anode
{
type wall;
	faces
	(
		(1 4 3 2)
		(0 4 1 0)
	);
}

wall_isolation_rot
{
type wall;
	faces
	(
		(6 7 8 9)
	);
}


wall_cathode
{
type wall;
	faces
	(
		(5 6 9 5)
		
	);
}

wall_isolation
{
type wall;
	faces
	(
		(2 3 8 7)
		
	);
}

wedge_front
{
type wedge;       
	faces
	(
		(0 1 6 5)
		(1 2 7 6)
	);
}

wedge_back
{
type wedge;
	faces
	(
		(4 0 5 9)
		(3 4 9 8)
	);
}

);

mergePatchPairs
(

);


// ************************************************************************* //
